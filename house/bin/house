#!/usr/bin/env ruby
class HouseRhyme
  def say
    stanzas.say
  end

  private

  def stanzas
    Stanzas.new
  end
end

class Stanzas
  attr_accessor :said

  def initialize(said=String.new)
    self.said = said
  end

  def say
    collection.each do |stanza|
      StanzaPresenter.new(preamble,stanza_builder(stanza)).say
    end
  end

  private

  def collection
    ['house that Jack built.',
     'malt that lay in',
     'rat that ate',
     'cat that killed',
     'dog that worried',
     'cow with the crumpled horn that tossed',
     'maiden all forlorn that milked',
     'man all tattered and torn that kissed',
     'priest all shaven and shorn that married',
     'rooster that crowed in the morn that woke',
     'farmer sowing his corn that kept',
     'horse and the hound and the horn that belonged to']
  end

  def preamble
    Preamble.new
  end

  def stanza_builder(stanza_part)
    self.said = Stanza.new(stanza_part).say + self.said
  end
end

class Stanza
  attr_accessor :stanza_part, :linking_article
  def initialize(stanza_part, linking_article=ArticleThe.new)
    self.stanza_part = stanza_part
    self.linking_article = linking_article
  end

  def say
    linking_article.to_s + ' ' + stanza_part + ' '
  end
end

class StanzaPresenter
  attr_accessor :preamble, :stanza, :output
  def initialize(preamble, stanza, output=StdoutOutput.new)
    self.preamble = preamble
    self.stanza   = stanza
    self.output   = output
  end

  def say
    output.line preamble, stanza
    output.pause
  end
end

class StdoutOutput
  def line(*parts)
    puts parts.join(' ').strip
  end

  def pause
    puts ""
  end
end

class ArticleThe
  def to_str
    'the'
  end
  alias_method :to_s, :to_str
end

class Preamble
  def to_str
    'This is'
  end
  alias_method :to_s, :to_str
end

HouseRhyme.new.say
