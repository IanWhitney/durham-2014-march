#!/usr/bin/env ruby
require 'yaml'

class HouseRhyme
  def say(preamble, lines)
    stanzas.say(preamble, lines)
  end

  private

  def stanzas
    Stanzas.new
  end
end

class Stanzas
  attr_accessor :said

  def initialize(said=String.new)
  end

  def say(preamble, lines)
    lines.each do |stanza|
      StanzaPresenter.new(preamble,stanza_builder(stanza)).say
    end
  end

  private

  def stanza_builder(stanza_part)
    self.said = Stanza.new(stanza_part).say + said
  end

  def said
    if @said
      ' ' + @said
    else
      @said = "."
    end
  end
end

class Stanza
  attr_accessor :stanza_part, :linking_article
  def initialize(stanza_part, linking_article=ArticleThe.new)
    self.stanza_part = stanza_part
    self.linking_article = linking_article
  end

  def say
    linking_article.to_s + ' ' + stanza_part.actor + ' that ' + stanza_part.action
  end
end

class StanzaPresenter
  attr_accessor :preamble, :stanza, :output
  def initialize(preamble, stanza, output=StdoutOutput.new)
    self.preamble = preamble
    self.stanza   = stanza
    self.output   = output
  end

  def say
    output.line preamble, stanza
    output.pause
  end
end

class StdoutOutput
  def line(*parts)
    puts parts.join(' ').strip
  end

  def pause
    puts ""
  end
end

class ArticleThe
  def to_str
    'the'
  end
  alias_method :to_s, :to_str
end

class Preamble
  def to_str
    'This is'
  end
  alias_method :to_s, :to_str
end

class Lines
  attr_reader :collection, :actions, :actors
  def initialize(actions, actors)
    @actions = actions
    @actors = actors
    merge_actors_and_actions
  end

  def each(&block)
    collection.each(&block)
  end

  def merge_actors_and_actions
    @collection = []
    @actors.each_with_index do |actor, index|
      @collection << Line.new(actor, @actions[index])
    end
  end
end

class Line
  attr_accessor :actor, :action
  def initialize(actor, action)
    self.actor = actor
    self.action = action
  end
end

require 'forwardable'

class YamlCollection
  extend Forwardable

  def_delegators :@collection, :each, :[], :each_with_index

  def initialize(name)
    @collection = []
    YAML::load(File.open("../../data/#{self.class.to_s.downcase}/#{name}.yml")).each do |line|
      @collection << line
    end
  end

  def shuffle
    @collection = @collection.shuffle
    self
  end
end

class Actors < YamlCollection; end

class Actions < YamlCollection; end

actors = Actors.new('jack_built')
actions = Actions.new('jack_built')
lines = Lines.new(actions, actors)
#lines = Lines.new(actions.shuffle, actors.shuffle)
HouseRhyme.new.say(Preamble.new, lines)
